#pragma once
//////////////////////////////////////////////////////////////////////////
// FileName : drawer.h
// Creator : 王文喜
// Data : 2021/1/22
// Comment : 画图工具入口类
//////////////////////////////////////////////////////////////////////////
#include "widget.h"

#include <vector>

#include "shape.h"

class ToolBar;
class ToolbarBtn;

class Drawer : public Widget{
public:

	Drawer();
	virtual ~Drawer();
	 
	void init();                                                 // 一些初始化
	virtual void drawAll();                                      // 将所有shape画到内存画板，一次性显示

protected:
	virtual void mousePressEvent(MouseEvent*) override;          // 处理鼠标按下的事件
	virtual void mouseMoveEvent(MouseEvent*) override;           // 处理鼠标移动的事件
	virtual void mouseReleaseEvent(MouseEvent*) override;        // 处理鼠标按下的事件
	virtual void paintEvent(PaintEvent*) override;               // 处理重绘事件
	virtual void buttonPressEvent(ButtonEvent*) override;        // 将按钮按下的事件分发到具体的按钮
	virtual Shape* checkAllShapeState(const Point&);             // 检查所有shape的状态

private:
	ToolBar* m_toolbar;                     // 工具栏
	ToolbarBtn* m_arrowBBtn;                // 鼠标箭头状态
	ToolbarBtn* m_lineTBBtn;                // 画线的工具栏按钮
	ToolbarBtn* m_rectTBBtn;                // 画矩形的工具栏按钮
	std::vector<Shape*> m_shapeList;        // 存放shape的容器
	Shape::ShapeType m_shapeType;           // 存放临时形状类型
	Shape* m_tempShape;                     // 临时形状
	Point* m_beginPoint;                    // 开始时的点
	HDC m_hdc;                              // 当前窗口HDC
	RECT m_rc;                              // 当前窗口区域
	RECT m_toolbarRC;                       // 工具栏区域
	RECT m_flashArea;                       // 要刷新的区域
	HDC m_memHdc;                           // 内存HDC
	HBITMAP m_memBitMap;                    // 内存画布
	int m_nBitmapWidth;                     // 内存画布宽度
	int m_nBitmapHeight;                    // 内存画布宽度
};
